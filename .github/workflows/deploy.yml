name: Build Release
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os:
        - macos-latest
        - ubuntu-latest

    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: full
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 100
      CARGO_NET_RETRY: 100

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
        profile: minimal
        override: true

    - if: matrix.os == 'ubuntu-latest'
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    - name: Restore cargo cache from cache
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo
        restore-keys: |
          ${{ runner.os }}-cargo

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

    - name: Build
      shell: bash
      run: cargo build --all --release

    - name: Archive
      if: matrix.os != 'windows-latest'
      run: zip --junk-paths mdbook-katex-${{ runner.os }}.zip LICENSE README.md target/release/mdbook-katex

    - uses: actions/upload-artifact@master
      with:
        name: mdbook-katex-${{ runner.os }}
        path: mdbook-katex-${{ runner.os }}.zip


  release:
    needs: build
    name: Upload Artifacts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get artifacts (macOS)
      uses: actions/download-artifact@v1
      with:
        name: mdbook-katex-macOS
        path: artifacts/

    - name: Get artifacts (Linux)
      uses: actions/download-artifact@v1
      with:
        name: mdbook-katex-Linux
        path: artifacts/

    - name: Get artifacts (Windows)
      uses: actions/download-artifact@v1
      with:
        name: mdbook-katex-Windows
        path: artifacts/

    - name: Extract the version tag
      id: version_tag
      # or ${GITHUB_REF##*/}
      shell: bash
      run: echo ::set-output name=value::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: true

    - name: Upload Release Asset (linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include an `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/mdbook-katex-Linux.zip
        asset_name: mdbook-katex-${{ steps.version_tag.outputs.value }}-linux.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (mac)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/mdbook-katex-macOS.zip
        asset_name: mdbook-katex-${{ steps.version_tag.outputs.value }}-macos.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (win)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/mdbook-katex-Windows.zip
        asset_name: mdbook-katex-${{ steps.version_tag.outputs.value }}-windows.zip
        asset_content_type: application/zip

  publish:
    name: publish
    needs: release
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Publish crate
      uses: actions-rs/cargo@v1
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      with:
        toolchain: stable
        command: publish
        # args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
